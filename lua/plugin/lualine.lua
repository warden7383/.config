require('lualine').setup {
  options = {
    icons_enabled = true,
    theme = 'auto',
    component_separators = { left = '', right = ''},
    
    section_separators = { left = '', right = ''},
    disabled_filetypes = {
      statusline = {},
      winbar = {},
    },
    ignore_focus = {},
    always_divide_middle = true,
    globalstatus = true, -- false
    refresh = {
      statusline = 1000,
      tabline = 1000,
      winbar = 1000,
    }
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch', 'diff', 'diagnostics'},
    lualine_c = {'filename'},
    lualine_x = { 'encoding', 'fileformat', 'filetype'},
    lualine_y = {'progress'},
    lualine_z = {'location'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {}
  },
  -- tabline = {
  --   lualine_a = {
  --     "buffers",
  --   },
  --   lualine_z = {
  --     "tabs",
  --   },
  -- },
  winbar = {
  },
  inactive_winbar = {
  },
  extensions = {'fzf','nvim-tree', 'trouble', 'toggleterm'}
}
-- -- -- Bubbles config for lualine
-- -- -- Author: lokesh-krishna
-- -- -- MIT license, see LICENSE for more details.
-- --
-- -- -- stylua: ignore
-- -- local colors = {
-- --   blue   = '#80a0ff',
-- --   cyan   = '#79dac8',
-- --   black  = 'nil',
-- --   white  = '#c6c6c6',
-- --   red    = '#ff5189',
-- --   violet = '#d183e8',
-- --   grey   = '#303030',
-- -- }
-- --
-- -- local bubbles_theme = {
-- --   normal = {
-- --     a = { fg = colors.black, bg = colors.violet },
-- --     b = { fg = colors.white, bg = colors.grey },
-- --     c = { fg = colors.black, bg = colors.black },
-- --   },
-- --
-- --   insert = { a = { fg = colors.black, bg = colors.blue} },
-- --   visual = { a = { fg = colors.black, bg = colors.cyan } },
-- --   replace = { a = { fg = colors.black, bg = colors.red } },
-- --
-- --   inactive = {
-- --     a = { fg = colors.white, bg = colors.black },
-- --     b = { fg = colors.white, bg = colors.black },
-- --     c = { fg = colors.black, bg = colors.black },
-- --   },
-- -- }
-- --
-- -- require('lualine').setup {
-- --   options = {
-- --     theme = bubbles_theme,
-- --     component_separators = '    ', -- | -- this changes the component separators on the XYZ side..
-- --     section_separators = { left = '', right = '' },
-- --   },
-- --   sections = {
-- --     lualine_a = {
-- --       { 'mode', separator = { left = '', right = '  ' }, right_padding = 9 },
-- --     },
-- --     lualine_b = { 'filename', 'branch' },
-- --     lualine_c = { 'fileformat' },
-- --     lualine_x = {},
-- --     lualine_y = { 'filetype', 'progress' },
-- --     lualine_z = {
-- --       { 'location', separator = { right = '' }, left_padding = 2 },
-- --     },
-- --   },
-- --   inactive_sections = {
-- --     lualine_a = { 'filename' },
-- --     lualine_b = {},
-- --     lualine_c = {},
-- --     lualine_x = {},
-- --     lualine_y = {},
-- --     lualine_z = { 'location' },
-- --   },
-- --   tabline = {},
-- --   extensions = {},
-- -- }
--
--
-- -- -- Eviline config for lualine
-- -- -- Author: shadmansaleh
-- -- -- Credit: glepnir
-- -- local lualine = require('lualine')
-- --
-- -- -- Color table for highlights
-- -- -- stylua: ignore
-- -- local colors = {
-- --   bg       = '#202328',
-- --   fg       = '#bbc2cf',
-- --   yellow   = '#ECBE7B',
-- --   cyan     = '#008080',
-- --   darkblue = '#081633',
-- --   green    = '#98be65',
-- --   orange   = '#FF8800',
-- --   violet   = '#a9a1e1',
-- --   magenta  = '#c678dd',
-- --   blue     = '#51afef',
-- --   red      = '#ec5f67',
-- -- }
-- --
-- -- local conditions = {
-- --   buffer_not_empty = function()
-- --     return vim.fn.empty(vim.fn.expand('%:t')) ~= 1
-- --   end,
-- --   hide_in_width = function()
-- --     return vim.fn.winwidth(0) > 80
-- --   end,
-- --   check_git_workspace = function()
-- --     local filepath = vim.fn.expand('%:p:h')
-- --     local gitdir = vim.fn.finddir('.git', filepath .. ';')
-- --     return gitdir and #gitdir > 0 and #gitdir < #filepath
-- --   end,
-- -- }
-- --
-- -- -- Config
-- -- local config = {
-- --   options = {
-- --     -- Disable sections and component separators
-- --     component_separators = '',
-- --     section_separators = '',
-- --     theme = {
-- --       -- We are going to use lualine_c an lualine_x as left and
-- --       -- right section. Both are highlighted by c theme .  So we
-- --       -- are just setting default looks o statusline
-- --       normal = { c = { fg = colors.fg, bg = colors.bg } },
-- --       inactive = { c = { fg = colors.fg, bg = colors.bg } },
-- --     },
-- --   },
-- --   sections = {
-- --     -- these are to remove the defaults
-- --     lualine_a = {},
-- --     lualine_b = {},
-- --     lualine_y = {},
-- --     lualine_z = {},
-- --     -- These will be filled later
-- --     lualine_c = {},
-- --     lualine_x = {},
-- --   },
-- --   inactive_sections = {
-- --     -- these are to remove the defaults
-- --     lualine_a = {},
-- --     lualine_b = {},
-- --     lualine_y = {},
-- --     lualine_z = {},
-- --     lualine_c = {},
-- --     lualine_x = {},
-- --   },
-- -- }
-- --
-- -- -- Inserts a component in lualine_c at left section
-- -- local function ins_left(component)
-- --   table.insert(config.sections.lualine_c, component)
-- -- end
-- --
-- -- -- Inserts a component in lualine_x at right section
-- -- local function ins_right(component)
-- --   table.insert(config.sections.lualine_x, component)
-- -- end
-- --
-- -- ins_left {
-- --   function()
-- --     return '▊'
-- --   end,
-- --   color = { fg = colors.blue }, -- Sets highlighting of component
-- --   padding = { left = 0, right = 1 }, -- We don't need space before this
-- -- }
-- --
-- -- ins_left {
-- --   -- mode component
-- --   function()
-- --     return ''
-- --   end,
-- --   color = function()
-- --     -- auto change color according to neovims mode
-- --     local mode_color = {
-- --       n = colors.red,
-- --       i = colors.green,
-- --       v = colors.blue,
-- --       [''] = colors.blue,
-- --       V = colors.blue,
-- --       c = colors.magenta,
-- --       no = colors.red,
-- --       s = colors.orange,
-- --       S = colors.orange,
-- --       [''] = colors.orange,
-- --       ic = colors.yellow,
-- --       R = colors.violet,
-- --       Rv = colors.violet,
-- --       cv = colors.red,
-- --       ce = colors.red,
-- --       r = colors.cyan,
-- --       rm = colors.cyan,
-- --       ['r?'] = colors.cyan,
-- --       ['!'] = colors.red,
-- --       t = colors.red,
-- --     }
-- --     return { fg = mode_color[vim.fn.mode()] }
-- --   end,
-- --   padding = { right = 1 },
-- -- }
-- --
-- -- ins_left {
-- --   -- filesize component
-- --   'filesize',
-- --   cond = conditions.buffer_not_empty,
-- -- }
-- --
-- -- ins_left {
-- --   'filename',
-- --   cond = conditions.buffer_not_empty,
-- --   color = { fg = colors.magenta, gui = 'bold' },
-- -- }
-- --
-- -- ins_left { 'location' }
-- --
-- -- ins_left { 'progress', color = { fg = colors.fg, gui = 'bold' } }
-- --
-- -- ins_left {
-- --   'diagnostics',
-- --   sources = { 'nvim_diagnostic' },
-- --   symbols = { error = ' ', warn = ' ', info = ' ' },
-- --   diagnostics_color = {
-- --     color_error = { fg = colors.red },
-- --     color_warn = { fg = colors.yellow },
-- --     color_info = { fg = colors.cyan },
-- --   },
-- -- }
-- --
-- -- -- Insert mid section. You can make any number of sections in neovim :)
-- -- -- for lualine it's any number greater then 2
-- -- ins_left {
-- --   function()
-- --     return '%='
-- --   end,
-- -- }
-- --
-- -- ins_left {
-- --   -- Lsp server name .
-- --   function()
-- --     local msg = 'No Active Lsp'
-- --     local buf_ft = vim.api.nvim_buf_get_option(0, 'filetype')
-- --     local clients = vim.lsp.get_active_clients()
-- --     if next(clients) == nil then
-- --       return msg
-- --     end
-- --     for _, client in ipairs(clients) do
-- --       local filetypes = client.config.filetypes
-- --       if filetypes and vim.fn.index(filetypes, buf_ft) ~= -1 then
-- --         return client.name
-- --       end
-- --     end
-- --     return msg
-- --   end,
-- --   icon = ' LSP:',
-- --   color = { fg = '#ffffff', gui = 'bold' },
-- -- }
-- --
-- -- -- Add components to right sections
-- -- ins_right {
-- --   'o:encoding', -- option component same as &encoding in viml
-- --   fmt = string.upper, -- I'm not sure why it's upper case either ;)
-- --   cond = conditions.hide_in_width,
-- --   color = { fg = colors.green, gui = 'bold' },
-- -- }
-- --
-- -- ins_right {
-- --   'fileformat',
-- --   fmt = string.upper,
-- --   icons_enabled = false, -- I think icons are cool but Eviline doesn't have them. sigh
-- --   color = { fg = colors.green, gui = 'bold' },
-- -- }
-- --
-- -- ins_right {
-- --   'branch',
-- --   icon = '',
-- --   color = { fg = colors.violet, gui = 'bold' },
-- -- }
-- --
-- -- ins_right {
-- --   'diff',
-- --   -- Is it me or the symbol for modified us really weird
-- --   symbols = { added = ' ', modified = '󰝤 ', removed = ' ' },
-- --   diff_color = {
-- --     added = { fg = colors.green },
-- --     modified = { fg = colors.orange },
-- --     removed = { fg = colors.red },
-- --   },
-- --   cond = conditions.hide_in_width,
-- -- }
-- --
-- -- ins_right {
-- --   function()
-- --     return '▊'
-- --   end,
-- --   color = { fg = colors.blue },
-- --   padding = { left = 1 },
-- -- }
-- --
-- -- -- Now don't forget to initialize lualine
-- -- lualine.setup(config)
--
-- -------------------------------Default (theme='auto')-----------------------------------
-- -- local colors = {
-- --   red = '#ca1243',
-- --   grey = '#a0a1a7',
-- --   black = '#383a42',
-- --   white = '#f3f3f3',
-- --   light_green = '#83a598',
-- --   orange = '#fe8019',
-- --   green = '#8ec07c',
-- -- }
-- --
-- -- local theme = {
-- --   normal = {
-- --     a = { fg = colors.white, bg = colors.black },
-- --     b = { fg = colors.white, bg = colors.grey },
-- --     c = { fg = colors.black, bg = colors.white },
-- --     z = { fg = colors.white, bg = colors.black },
-- --   },
-- --   insert = { a = { fg = colors.black, bg = colors.light_green } },
-- --   visual = { a = { fg = colors.black, bg = colors.orange } },
-- --   replace = { a = { fg = colors.black, bg = colors.green } },
-- -- }
-- --
-- -- local empty = require('lualine.component'):extend()
-- -- function empty:draw(default_highlight)
-- --   self.status = ''
-- --   self.applied_separator = ''
-- --   self:apply_highlights(default_highlight)
-- --   self:apply_section_separators()
-- --   return self.status
-- -- end
-- --
-- -- -- Put proper separators and gaps between components in sections
-- -- local function process_sections(sections)
-- --   for name, section in pairs(sections) do
-- --     local left = name:sub(9, 10) < 'x'
-- --     for pos = 1, name ~= 'lualine_z' and #section or #section - 1 do
-- --       table.insert(section, pos * 2, { empty, color = { fg = colors.white, bg = colors.white } })
-- --     end
-- --     for id, comp in ipairs(section) do
-- --       if type(comp) ~= 'table' then
-- --         comp = { comp }
-- --         section[id] = comp
-- --       end
-- --       comp.separator = left and { right = '' } or { left = '' }
-- --     end
-- --   end
-- --   return sections
-- -- end
-- --
-- -- local function search_result()
-- --   if vim.v.hlsearch == 0 then
-- --     return ''
-- --   end
-- --   local last_search = vim.fn.getreg('/')
-- --   if not last_search or last_search == '' then
-- --     return ''
-- --   end
-- --   local searchcount = vim.fn.searchcount { maxcount = 9999 }
-- --   return last_search .. '(' .. searchcount.current .. '/' .. searchcount.total .. ')'
-- -- end
-- --
-- -- local function modified()
-- --   if vim.bo.modified then
-- --     return '+'
-- --   elseif vim.bo.modifiable == false or vim.bo.readonly == true then
-- --     return '-'
-- --   end
-- --   return ''
-- -- end
-- --
-- -- require('lualine').setup {
-- --   options = {
-- --     theme = theme,
-- --     component_separators = '',
-- --     section_separators = { left = '', right = '' },
-- --   },
-- --   sections = process_sections {
-- --     lualine_a = { 'mode' },
-- --     lualine_b = {
-- --       'branch',
-- --       'diff',
-- --       {
-- --         'diagnostics',
-- --         source = { 'nvim' },
-- --         sections = { 'error' },
-- --         diagnostics_color = { error = { bg = colors.red, fg = colors.white } },
-- --       },
-- --       {
-- --         'diagnostics',
-- --         source = { 'nvim' },
-- --         sections = { 'warn' },
-- --         diagnostics_color = { warn = { bg = colors.orange, fg = colors.white } },
-- --       },
-- --       { 'filename', file_status = false, path = 1 },
-- --       { modified, color = { bg = colors.red } },
-- --       {
-- --         '%w',
-- --         cond = function()
-- --           return vim.wo.previewwindow
-- --         end,
-- --       },
-- --       {
-- --         '%r',
-- --         cond = function()
-- --           return vim.bo.readonly
-- --         end,
-- --       },
-- --       {
-- --         '%q',
-- --         cond = function()
-- --           return vim.bo.buftype == 'quickfix'
-- --         end,
-- --       },
-- --     },
-- --     lualine_c = {},
-- --     lualine_x = {},
-- --     lualine_y = { search_result, 'filetype' },
-- --     lualine_z = { '%l:%c', '%p%%/%L' },
-- --   },
-- --   inactive_sections = {
-- --     lualine_c = { '%f %y %m' },
-- --     lualine_x = {},
-- --   },
-- -- }
--
-- vim.o.showcmdloc = 'statusline'

		-- require('lualine').setup {
		-- 	options = {
		-- 		icons_enabled = true,
		-- 		theme = 'auto',
		-- 		component_separators = { left = '', right = ''}, -- ⏽ 
		-- 		section_separators = { left = '', right = ''},
		-- 		ignore_focus = { 'NvimTree' },
		-- 		always_divide_middle = false,
		-- 		globalstatus = true,
		-- 		refresh = {
		-- 			statusline = 1000,
		-- 			tabline = 1000,
		-- 			winbar = 1000,
		-- 		}
		-- 	},
		-- 	sections = {
		-- 		lualine_a = {
		-- 			{
		-- 				'mode',
		-- 				color = { gui = 'bold' },
		-- 				fmt = function(str)
		-- 					local first = str:sub(1,1)
		-- 					if first == 'N' then
		-- 						return ''
		-- 					elseif first == 'V' then
		-- 						return ''
		-- 					elseif first == 'I' then
		-- 						return ''
		-- 					elseif first == 'C' then
		-- 						return ''
		-- 					end
		-- 					return str:sub(1,1)
		-- 				end,
		-- 				padding = { left = 0, right = 1 },
		-- 				separator = { left = '█', right = '' }
		-- 			}
		-- 		},
		-- 		lualine_b = {
		-- 			{
		-- 				'filetype',
		-- 				icon_only = true,
		-- 				padding = { left = 1, right = 0 },
		-- 				separator = ''
		-- 			},
		-- 			{
		-- 				'filename',
		-- 				color = { gui = 'italic' },
		-- 				file_status = true,
		-- 				newfile_status = true,
		-- 				on_click = function()
		-- 					vim.cmd('NvimTreeOpen')
		-- 				end,
		-- 				path = 0,
		-- 				padding = { left = 0, right = 0 },
		-- 				shorting_target = 40,
		-- 				symbols = {
		-- 					modified = "-",
		-- 					readonly ="-",
		-- 					unnamed  = "c",
		-- 					newfile  = "c",
		-- 				}
		-- 			}
		-- 		},
		-- 		lualine_c = {
		-- 			{
		-- 				'branch',
		-- 				color = { gui = 'bold' },
		-- 				icon = {'', color = {fg = '#F14C28'}},
		-- 				on_click = function()
		-- 					vim.cmd('Telescope git_branches')
		-- 				end,
		-- 				padding = { left = 1, right = 0 },
		-- 			},
		-- 			{
		-- 				'diff',
		-- 				on_click = function()
		-- 					vim.cmd('Telescope git_status')
		-- 				end,
		-- 				padding = { left = 1, right = 0 },
		-- 				symbols = {
		-- 					added = '+',
		-- 					modified = '~',
		-- 					removed = '-'
		-- 				}
		-- 			},
		-- 		},
		-- 		lualine_x = {
		-- 			{
		-- 				'searchcount',
		-- 				color = { fg = '#23CE6B', gui = 'bold' },
		-- 				fmt = function(str)
		-- 					return string.sub(str, 2, -2)
		-- 				end,
		-- 				icon = {'󰱽', color = { fg = '#EAC435' }},
		-- 				padding = { left = 0, right = 1 },
		-- 				separator = ''
		-- 			},
		-- 			{
		-- 				function() return '󰳾' end,
		-- 				color = { fg = '#009DDC' },
		-- 				cond = function()
		-- 					return vim.b.VM_Selection ~= nil and not vim.tbl_isempty(vim.b.VM_Selection)
		-- 				end
		-- 			},
		-- 			{
		-- 				'selectioncount',
		-- 				color = { fg = '#BA2C73' },
		-- 				icon = { '', color = { fg = '#963484' }},
		-- 				padding = { left = 0, right = 1 },
		-- 				separator = ''
		-- 			},
		-- 			{
		-- 				'diagnostics',
		-- 				on_click = function()
		-- 					vim.cmd('Trouble diagnostics')
		-- 				end,
		-- 				padding = { left = 0, right = 1 },
		-- 				sources = { 'nvim_diagnostic' },
		-- 				symbols = {
		-- 					error = "c",
		-- 					warn  = ",",
		-- 					info  = "s,",
		-- 					hint  = "ssa",
		-- 				},
		-- 			},
		-- 			{
		-- 				'hostname',
		-- 				color = { fg = '#119DA4', gui = 'bold' },
		-- 				cond = function()
		-- 					return vim.env.SSH_CLIENT ~= nil
		-- 				end,
		-- 				fmt = function(str)
		-- 					local alias = {
		-- 						['ALOKNIGAM-IDC'] = 'devbox'
		-- 					}
		-- 					return alias[str] or str
		-- 				end,
		-- 				icon = { '', color = { fg = '#3066BE' }},
		-- 				padding = { left = 0, right = 1 }
		-- 			},
		-- 			{
		-- 				'filesize',
		-- 				color = { fg = '#B90E0A', gui = 'bold' },
		-- 				cond = isLargeFile,
		-- 				fmt = function(str)
		-- 					return '[' .. str .. ']'
		-- 				end,
		-- 				padding = { left = 0, right = 1 }
		-- 			},
		-- 			{
		-- 				'encoding',
		-- 				color = { fg = GetFgOrFallback('String', '#C2F261'), gui ='italic' },
		-- 				fmt = function(str)
		-- 					if vim.o.bomb then
		-- 						str = str .. '-bom'
		-- 					end
		-- 					return string.gsub(str, 'utf.', 'u')
		-- 				end,
		-- 				padding = { left = 0, right = 1 }
		-- 			}
		-- 		},
		-- 		lualine_y = {
		-- 			{
		-- 				function() return '󰑊' end,
		-- 				color = { fg = '#B43757' },
		-- 				cond = function() return vim.fn.reg_recording() ~= '' end,
		-- 				padding = { left = 0, right = 1 },
		-- 				separator = ''
		-- 			},
		-- 			{
		-- 				function() return vim.g.session_icon or '' end,
		-- 				padding = { left = 0, right = 1 },
		-- 				separator = ''
		-- 			},
		-- 			{
		-- 				lspIcon,
		-- 				cond = isLspAttached,
		-- 				on_click = function()
		-- 					vim.cmd('LspInfo')
		-- 				end,
		-- 				padding = { left = 0, right = 1 },
		-- 				separator = ''
		-- 			},
		-- 			{
		-- 				function()
		-- 					local buf = vim.api.nvim_get_current_buf()
		-- 					local highlighter = require('vim.treesitter.highlighter')
		-- 					if highlighter.active[buf] then
		-- 						return '󰐅'
		-- 					end
		-- 					return ''
		-- 				end,
		-- 				color = { fg = '#097969' },
		-- 				padding = { left = 0, right = 1 },
		-- 				separator = ''
		-- 			},
		-- 			{
		-- 				function()
		-- 					if vim.o.wrap then
		-- 						return '󰖶'
		-- 					else
		-- 						return '󰯟'
		-- 					end
		-- 				end,
		-- 				color = { fg = '#FFBF00' },
		-- 				on_click = function()
		-- 					vim.cmd('set wrap!')
		-- 				end,
		-- 				padding = { left = 0, right = 1 },
		-- 				separator = ''
		-- 			},
		-- 			{
		-- 				'fileformat',
		-- 				color = { fg = '#0096FF' },
		-- 				padding = { left = 0, right = 1 },
		-- 			},
		-- 		},
		-- 		lualine_z = {
		-- 			{
		-- 				'location',
		-- 				fmt = function(str)
		-- 					return str:gsub("^%s+", ""):gsub("%s+", "")
		-- 				end,
		-- 				on_click = function ()
		-- 					require('mini.map').toggle()
		-- 					require('codewindow').toggle_minimap()
		-- 				end,
		-- 				padding = { left = 0, right = 0 },
		-- 				separator = { left = '', right = '█' }
		-- 			}
		-- 		}
		-- 	},
		-- 	inactive_sections = {
		-- 		lualine_a = {},
		-- 		lualine_b = {},
		-- 		lualine_c = {'filename'},
		-- 		lualine_x = {'location'},
		-- 		lualine_y = {},
		-- 		lualine_z = {}
		-- 	},
		-- 	winbar = {
		-- 		lualine_a = {
		-- 			{
		-- 				'filetype',
		-- 				cond = function() return not DropbarEnabled and CountWindows(true) > 1 end,
		-- 				icon_only = true,
		-- 				padding = { left = 1, right = 0 },
		-- 				separator = ''
		-- 			},
		-- 			{
		-- 				'filename',
		-- 				color = { gui = 'italic' },
		-- 				cond = function() return not DropbarEnabled and CountWindows(true) > 1 end,
		-- 				file_status = true,
		-- 				newfile_status = true,
		-- 				path = 0,
		-- 				shorting_target = 40,
		-- 				symbols = {
		-- 					modified = "dsa",
		-- 					readonly = "dsa",
		-- 					unnamed  = "dsa",
		-- 					newfile  = "dsa",
		-- 				}
		-- 			},
		-- 			{
		-- 				function()
		-- 					if DropbarEnabled then
		-- 						return '%{%v:lua.dropbar.get_dropbar_str()%}'
		-- 					else
		-- 						return ''
		-- 					end
		-- 				end,
		-- 				padding = { left = 0, right = 0 },
		-- 				separator = { left = '', right = '' }
		-- 			},
		-- 		}
		-- 	},
		-- 	inactive_winbar = {
		-- 		lualine_a = {
		-- 			{
		-- 				'filetype',
		-- 				cond = function () return CountWindows(true) > 1 end,
		-- 				icon_only = true,
		-- 				padding = { left = 1, right = 0 },
		-- 				separator = ''
		-- 			},
		-- 			{
		-- 				'filename',
		-- 				color = { gui = 'italic' },
		-- 				cond = function () return CountWindows(true) > 1 end,
		-- 				file_status = true,
		-- 				newfile_status = true,
		-- 				path = 3,
		-- 				shorting_target = 40,
		-- 				symbols = {
		-- 					modified = "Sadsa",
		-- 					readonly =  "Sadsa",
		-- 					unnamed  = "Sadsa",
		-- 					newfile  = "Sadsa",
		-- 				}
		-- 			}
		-- 		},
		-- 		lualine_c = {
		-- 			{
		-- 				'diff',
		-- 				cond = function () return CountWindows(true) > 1 end,
		-- 				padding = { left = 1, right = 0 },
		-- 				symbols = {
		-- 					added = '+',
		-- 					modified = '~',
		-- 					removed = '-'
		-- 				}
		-- 			},
		-- 		},
		-- 		lualine_z = {
		-- 			{
		-- 				lspIcon,
		-- 				cond = function () return CountWindows(true) > 1 and isLspAttached() end,
		-- 				on_click = function()
		-- 					vim.cmd('LspInfo')
		-- 				end,
		-- 				padding = { left = 0, right = 1 },
		-- 				separator = ''
		-- 			},
		-- 			{
		-- 				'diagnostics',
		-- 				cond = function () return CountWindows(true) > 1 end,
		-- 				on_click = function()
		-- 					vim.cmd('TroubleToggle')
		-- 				end,
		-- 				padding = { left = 1, right = 1 },
		-- 				sources = { 'nvim_diagnostic' },
		-- 				symbols = {
		-- 					error = "Sadsa",
		-- 					warn  = "dsadsa",
		-- 					info  = "sadsa",
		-- 					hint  = "dsadsa",
		-- 				},
		-- 			},
		-- 		},
		-- 	},
		-- 	extensions = {
		-- 		'aerial',
		-- 		'lazy',
		-- 		'mason',
		-- 		'nvim-dap-ui',
		-- 		'nvim-tree',
		-- 		'quickfix',
		-- 		'toggleterm',
		-- 		'trouble',
		-- 	}
		-- }
